// <auto-generated />
using LoanManagementService.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoanManagementService.Migrations
{
    [DbContext(typeof(LoanDatabaseContext))]
    partial class LoanDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LoanManagementService.Model.BorrowerInformation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BorrowerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BorrowerInformations");
                });

            modelBuilder.Entity("LoanManagementService.Model.LegalDocument", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Documents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LegalDocument");
                });

            modelBuilder.Entity("LoanManagementService.Model.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LoanNumber")
                        .HasColumnType("int");

                    b.Property<bool>("LoanStatus")
                        .HasColumnType("bit");

                    b.Property<int>("LoanTerm")
                        .HasColumnType("int");

                    b.Property<string>("LoanType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LoanManagementService.Model.PropertyInfomation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyInfomations");
                });

            modelBuilder.Entity("LoanManagementService.Model.BorrowerInformation", b =>
                {
                    b.HasOne("LoanManagementService.Model.Loan", "Loan")
                        .WithOne("BorrowerInformation")
                        .HasForeignKey("LoanManagementService.Model.BorrowerInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoanManagementService.Model.LegalDocument", b =>
                {
                    b.HasOne("LoanManagementService.Model.Loan", "Loan")
                        .WithOne("LegalDocument")
                        .HasForeignKey("LoanManagementService.Model.LegalDocument", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoanManagementService.Model.PropertyInfomation", b =>
                {
                    b.HasOne("LoanManagementService.Model.Loan", "Loan")
                        .WithOne("PropertyInfomation")
                        .HasForeignKey("LoanManagementService.Model.PropertyInfomation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
